{
  "api/nickmaltbie.MinimapTools.Background.AbstractMinimapElement.html": {
    "href": "api/nickmaltbie.MinimapTools.Background.AbstractMinimapElement.html",
    "title": "Class AbstractMinimapElement | MinimapTools Documentation",
    "keywords": "Class AbstractMinimapElement Minimap element that supports drawing a texture on a background. Inheritance Object AbstractMinimapElement BoxMinimapElement SpriteMinimapElement ExampleMinimapElement Implements IMinimapElement Namespace : nickmaltbie.MinimapTools.Background Assembly : cs.temp.dll.dll Syntax public abstract class AbstractMinimapElement : MonoBehaviour, IMinimapElement Fields drawOrder Order that this should be drawn on the minimap. Declaration public int drawOrder Field Value Type Description Int32 Methods DrawOnBackground(IMinimap, Texture2D) Draw this element on the background of a minimap. Declaration public virtual void DrawOnBackground(IMinimap minimap, Texture2D backgroundTexture) Parameters Type Name Description IMinimap minimap Minimap for getting space of element. Texture2D backgroundTexture Background texture to draw minimap onto. GetOrder() Get the order that this element should be drawn on the background. Declaration public int GetOrder() Returns Type Description Int32 Integer representing order with lowest number taking priority. GetRotation() Get the rotation of this object in world space. Declaration public abstract float GetRotation() Returns Type Description Single Rotation of the object in world space. GetTexture(IMinimap) Gets the texture associated with this minimap element for a given minimap. Declaration public abstract Texture2D GetTexture(IMinimap minimap) Parameters Type Name Description IMinimap minimap Minimap to get the target texture for. Returns Type Description Texture2D Texture to draw on the background of the minimap. WorldCenter() Get the center of this element in world space. Declaration public abstract Vector3 WorldCenter() Returns Type Description Vector3 Implements IMinimapElement"
  },
  "api/nickmaltbie.MinimapTools.Background.BackgroundTexture.html": {
    "href": "api/nickmaltbie.MinimapTools.Background.BackgroundTexture.html",
    "title": "Class BackgroundTexture | MinimapTools Documentation",
    "keywords": "Class BackgroundTexture Element to compose a background texture from a collection of minimap elements. Inheritance Object BackgroundTexture Namespace : nickmaltbie.MinimapTools.Background Assembly : cs.temp.dll.dll Syntax public class BackgroundTexture Constructors BackgroundTexture(IMinimap, Vector2Int, Nullable<Color>) Create a background texture. Declaration public BackgroundTexture(IMinimap minimap, Vector2Int size, Color? color = null) Parameters Type Name Description IMinimap minimap Minimap reference. Vector2Int size Size of texture in pixels. Nullable < Color > color BackgroundTexture(IMinimap, Vector2Int, Texture2D) Create a background texture. Declaration public BackgroundTexture(IMinimap minimap, Vector2Int size, Texture2D background) Parameters Type Name Description IMinimap minimap Minimap reference. Vector2Int size Size of texture in pixels. Texture2D background Background of the minimap. Methods AddElementToMinimap(IMinimapElement) Add a given element to the minimap. Declaration public void AddElementToMinimap(IMinimapElement element) Parameters Type Name Description IMinimapElement element Element to add to the minimap. GetTexture2D() Get the Texture2D of this minimap. Declaration public Texture2D GetTexture2D() Returns Type Description Texture2D Texture of the minimap."
  },
  "api/nickmaltbie.MinimapTools.Background.BoxMinimapElement.html": {
    "href": "api/nickmaltbie.MinimapTools.Background.BoxMinimapElement.html",
    "title": "Class BoxMinimapElement | MinimapTools Documentation",
    "keywords": "Class BoxMinimapElement Minimap element that will draw a box based on a set of bounds from a given box collider. Inheritance Object AbstractMinimapElement BoxMinimapElement Implements IMinimapElement Inherited Members AbstractMinimapElement.drawOrder AbstractMinimapElement.DrawOnBackground(IMinimap, Texture2D) AbstractMinimapElement.GetOrder() Namespace : nickmaltbie.MinimapTools.Background Assembly : cs.temp.dll.dll Syntax public class BoxMinimapElement : AbstractMinimapElement, IMinimapElement Fields color Color of the box on the minimap. Declaration public Color color Field Value Type Description Color Methods GetRotation() Get the rotation of this object in world space. Declaration public override float GetRotation() Returns Type Description Single Rotation of the object in world space. Overrides AbstractMinimapElement.GetRotation() GetTexture(IMinimap) Gets the texture associated with this minimap element for a given minimap. Declaration public override Texture2D GetTexture(IMinimap minimap) Parameters Type Name Description IMinimap minimap Minimap to get the target texture for. Returns Type Description Texture2D Texture to draw on the background of the minimap. Overrides AbstractMinimapElement.GetTexture(IMinimap) WorldCenter() Get the center of this element in world space. Declaration public override Vector3 WorldCenter() Returns Type Description Vector3 Overrides AbstractMinimapElement.WorldCenter() Implements IMinimapElement"
  },
  "api/nickmaltbie.MinimapTools.Background.html": {
    "href": "api/nickmaltbie.MinimapTools.Background.html",
    "title": "Namespace nickmaltbie.MinimapTools.Background | MinimapTools Documentation",
    "keywords": "Namespace nickmaltbie.MinimapTools.Background Classes AbstractMinimapElement Minimap element that supports drawing a texture on a background. BackgroundTexture Element to compose a background texture from a collection of minimap elements. BoxMinimapElement Minimap element that will draw a box based on a set of bounds from a given box collider. SpriteMinimapElement Minimap element that will draw a box based on a set of bounds from a given box collider. Interfaces IMinimapElement Element that can be added to the background of the minimap."
  },
  "api/nickmaltbie.MinimapTools.Background.IMinimapElement.html": {
    "href": "api/nickmaltbie.MinimapTools.Background.IMinimapElement.html",
    "title": "Interface IMinimapElement | MinimapTools Documentation",
    "keywords": "Interface IMinimapElement Element that can be added to the background of the minimap. Namespace : nickmaltbie.MinimapTools.Background Assembly : cs.temp.dll.dll Syntax public interface IMinimapElement Methods DrawOnBackground(IMinimap, Texture2D) Draw this element on the background of a minimap. Declaration void DrawOnBackground(IMinimap minimap, Texture2D backgroundTexture) Parameters Type Name Description IMinimap minimap Minimap for getting space of element. Texture2D backgroundTexture Background texture to draw minimap onto. GetOrder() Get the order that this element should be drawn on the background. Declaration int GetOrder() Returns Type Description Int32 Integer representing order with lowest number taking priority."
  },
  "api/nickmaltbie.MinimapTools.Background.SpriteMinimapElement.html": {
    "href": "api/nickmaltbie.MinimapTools.Background.SpriteMinimapElement.html",
    "title": "Class SpriteMinimapElement | MinimapTools Documentation",
    "keywords": "Class SpriteMinimapElement Minimap element that will draw a box based on a set of bounds from a given box collider. Inheritance Object AbstractMinimapElement SpriteMinimapElement Implements IMinimapElement Inherited Members AbstractMinimapElement.drawOrder AbstractMinimapElement.DrawOnBackground(IMinimap, Texture2D) AbstractMinimapElement.GetOrder() Namespace : nickmaltbie.MinimapTools.Background Assembly : cs.temp.dll.dll Syntax public class SpriteMinimapElement : AbstractMinimapElement, IMinimapElement Fields color Color of the box on the minimap. Declaration public Color color Field Value Type Description Color Methods GetRotation() Get the rotation of this object in world space. Declaration public override float GetRotation() Returns Type Description Single Rotation of the object in world space. Overrides AbstractMinimapElement.GetRotation() GetTexture(IMinimap) Gets the texture associated with this minimap element for a given minimap. Declaration public override Texture2D GetTexture(IMinimap minimap) Parameters Type Name Description IMinimap minimap Minimap to get the target texture for. Returns Type Description Texture2D Texture to draw on the background of the minimap. Overrides AbstractMinimapElement.GetTexture(IMinimap) WorldCenter() Get the center of this element in world space. Declaration public override Vector3 WorldCenter() Returns Type Description Vector3 Overrides AbstractMinimapElement.WorldCenter() Implements IMinimapElement"
  },
  "api/nickmaltbie.MinimapTools.EditorTools.BoxMinimapElementEditor.html": {
    "href": "api/nickmaltbie.MinimapTools.EditorTools.BoxMinimapElementEditor.html",
    "title": "Class BoxMinimapElementEditor | MinimapTools Documentation",
    "keywords": "Class BoxMinimapElementEditor Editor tool to modify bounds of a minimap. Inheritance Object BoxMinimapElementEditor Namespace : nickmaltbie.MinimapTools.EditorTools Assembly : cs.temp.dll.dll Syntax public class BoxMinimapElementEditor : Editor Methods OnSceneGUI() Declaration public void OnSceneGUI()"
  },
  "api/nickmaltbie.MinimapTools.EditorTools.html": {
    "href": "api/nickmaltbie.MinimapTools.EditorTools.html",
    "title": "Namespace nickmaltbie.MinimapTools.EditorTools | MinimapTools Documentation",
    "keywords": "Namespace nickmaltbie.MinimapTools.EditorTools Classes BoxMinimapElementEditor Editor tool to modify bounds of a minimap. MinimapBoundsSourceEditor Editor tool to modify bounds of a minimap. MinimapSquareUtils MinimapSquareUtils for the minimap. ReadOnlyDrawer This class contain custom drawer for ReadOnly attribute. SpriteMinimapElementEditor Editor tool to modify size of a SpriteMinimapElement."
  },
  "api/nickmaltbie.MinimapTools.EditorTools.MinimapBoundsSourceEditor.html": {
    "href": "api/nickmaltbie.MinimapTools.EditorTools.MinimapBoundsSourceEditor.html",
    "title": "Class MinimapBoundsSourceEditor | MinimapTools Documentation",
    "keywords": "Class MinimapBoundsSourceEditor Editor tool to modify bounds of a minimap. Inheritance Object MinimapBoundsSourceEditor Namespace : nickmaltbie.MinimapTools.EditorTools Assembly : cs.temp.dll.dll Syntax public class MinimapBoundsSourceEditor : Editor Methods OnSceneGUI() Declaration public void OnSceneGUI()"
  },
  "api/nickmaltbie.MinimapTools.EditorTools.MinimapSquareUtils.html": {
    "href": "api/nickmaltbie.MinimapTools.EditorTools.MinimapSquareUtils.html",
    "title": "Class MinimapSquareUtils | MinimapTools Documentation",
    "keywords": "Class MinimapSquareUtils MinimapSquareUtils for the minimap. Inheritance Object MinimapSquareUtils Namespace : nickmaltbie.MinimapTools.EditorTools Assembly : cs.temp.dll.dll Syntax public static class MinimapSquareUtils Methods DrawFourSizeHandles(MinimapSquare, Transform, Object) Declaration public static void DrawFourSizeHandles(MinimapSquare minimapSquare, Transform origin, Object objectToUndo = null) Parameters Type Name Description MinimapSquare minimapSquare Transform origin Object objectToUndo DrawSizeHandle(MinimapSquare, Transform, Vector2, Object) Declaration public static void DrawSizeHandle(MinimapSquare minimapSquare, Transform origin, Vector2 direction, Object objectToUndo = null) Parameters Type Name Description MinimapSquare minimapSquare Transform origin Vector2 direction Object objectToUndo RenderMinimapSquare(MinimapSquare, Vector3, Nullable<Color>) Render a minimap square in the editor space. Declaration public static void RenderMinimapSquare(MinimapSquare minimapSquare, Vector3 offset, Color? color = null) Parameters Type Name Description MinimapSquare minimapSquare Minimap square to render. Vector3 offset Offset of minimap square. Nullable < Color > color Color to draw the square for the minimap. UpdateMinimapSquareFromTransform(Transform, MinimapSquare) Declaration public static void UpdateMinimapSquareFromTransform(Transform transform, MinimapSquare minimapShape) Parameters Type Name Description Transform transform MinimapSquare minimapShape"
  },
  "api/nickmaltbie.MinimapTools.EditorTools.ReadOnlyDrawer.html": {
    "href": "api/nickmaltbie.MinimapTools.EditorTools.ReadOnlyDrawer.html",
    "title": "Class ReadOnlyDrawer | MinimapTools Documentation",
    "keywords": "Class ReadOnlyDrawer This class contain custom drawer for ReadOnly attribute. Inheritance Object ReadOnlyDrawer Namespace : nickmaltbie.MinimapTools.EditorTools Assembly : cs.temp.dll.dll Syntax public class ReadOnlyDrawer : PropertyDrawer Methods OnGUI(Rect, SerializedProperty, GUIContent) Unity method for drawing GUI in Editor Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position Position. SerializedProperty property Property. GUIContent label Label."
  },
  "api/nickmaltbie.MinimapTools.EditorTools.SpriteMinimapElementEditor.html": {
    "href": "api/nickmaltbie.MinimapTools.EditorTools.SpriteMinimapElementEditor.html",
    "title": "Class SpriteMinimapElementEditor | MinimapTools Documentation",
    "keywords": "Class SpriteMinimapElementEditor Editor tool to modify size of a SpriteMinimapElement. Inheritance Object SpriteMinimapElementEditor Namespace : nickmaltbie.MinimapTools.EditorTools Assembly : cs.temp.dll.dll Syntax public class SpriteMinimapElementEditor : Editor Methods OnSceneGUI() Declaration public void OnSceneGUI()"
  },
  "api/nickmaltbie.MinimapTools.Icon.AbstractSpriteIcon.html": {
    "href": "api/nickmaltbie.MinimapTools.Icon.AbstractSpriteIcon.html",
    "title": "Class AbstractSpriteIcon | MinimapTools Documentation",
    "keywords": "Class AbstractSpriteIcon Icon for a minimap composed of a simple sprite. Inheritance Object AbstractSpriteIcon FixedSizeSpriteIcon RelativeSizeSpriteIcon Implements IMinimapIcon Namespace : nickmaltbie.MinimapTools.Icon Assembly : cs.temp.dll.dll Syntax public abstract class AbstractSpriteIcon : MonoBehaviour, IMinimapIcon Fields rotateIcon Should the icon rotate with the object's rotation. Declaration public bool rotateIcon Field Value Type Description Boolean sprite Icon for this object on the minimap. Declaration public Sprite sprite Field Value Type Description Sprite Methods CreateIcon(IMinimap, RectTransform) Create an icon to represent this object on the minimap. Declaration public GameObject CreateIcon(IMinimap minimap, RectTransform minimapTransform) Parameters Type Name Description IMinimap minimap Reference to minimap this icon will be added to, useful for scaling and manipulating the icon RectTransform minimapTransform Transform of the parent minimap this is being added to. Returns Type Description GameObject The newly created icon for this object. GetIconRotation() Get the rotation of the object in world space. Declaration public Quaternion GetIconRotation() Returns Type Description Quaternion The current rotation of the object in world space. GetPixelSize(IMinimap) Size of the icon in pixels. Declaration public abstract Vector2Int GetPixelSize(IMinimap minimap) Parameters Type Name Description IMinimap minimap Minimap the icon will be drawn on. May affect the size of the icon. Returns Type Description Vector2Int Size of the icon in pixels. GetWorldSize() If this element scales with the map size, this will scale the element to be larger or smaller based on its world size. Declaration public virtual Vector2 GetWorldSize() Returns Type Description Vector2 Size of the object in world units. GetWorldSpace() Get the location of this object in world space. Declaration public Vector3 GetWorldSpace() Returns Type Description Vector3 Position of the object in world space. RotateWithMap() Should the element rotate with the map. Declaration public bool RotateWithMap() Returns Type Description Boolean True if the element should rotate with the map, false otherwise. ScaleWithMap() Should the icon scale with the map scale. Declaration public abstract bool ScaleWithMap() Returns Type Description Boolean If true, will scale with the map, if false will not scale with the map. Implements IMinimapIcon"
  },
  "api/nickmaltbie.MinimapTools.Icon.FixedSizeSpriteIcon.html": {
    "href": "api/nickmaltbie.MinimapTools.Icon.FixedSizeSpriteIcon.html",
    "title": "Class FixedSizeSpriteIcon | MinimapTools Documentation",
    "keywords": "Class FixedSizeSpriteIcon Icon for a minimap composed of a simple sprite of a fixed pixel size. Inheritance Object AbstractSpriteIcon FixedSizeSpriteIcon Implements IMinimapIcon Inherited Members AbstractSpriteIcon.sprite AbstractSpriteIcon.rotateIcon AbstractSpriteIcon.GetWorldSpace() AbstractSpriteIcon.GetIconRotation() AbstractSpriteIcon.RotateWithMap() AbstractSpriteIcon.CreateIcon(IMinimap, RectTransform) AbstractSpriteIcon.GetWorldSize() Namespace : nickmaltbie.MinimapTools.Icon Assembly : cs.temp.dll.dll Syntax public class FixedSizeSpriteIcon : AbstractSpriteIcon, IMinimapIcon Methods GetPixelSize(IMinimap) Size of the icon in pixels. Declaration public override Vector2Int GetPixelSize(IMinimap minimap) Parameters Type Name Description IMinimap minimap Minimap the icon will be drawn on. May affect the size of the icon. Returns Type Description Vector2Int Size of the icon in pixels. Overrides AbstractSpriteIcon.GetPixelSize(IMinimap) ScaleWithMap() Should the icon scale with the map scale. Declaration public override bool ScaleWithMap() Returns Type Description Boolean If true, will scale with the map, if false will not scale with the map. Overrides AbstractSpriteIcon.ScaleWithMap() Implements IMinimapIcon"
  },
  "api/nickmaltbie.MinimapTools.Icon.html": {
    "href": "api/nickmaltbie.MinimapTools.Icon.html",
    "title": "Namespace nickmaltbie.MinimapTools.Icon | MinimapTools Documentation",
    "keywords": "Namespace nickmaltbie.MinimapTools.Icon Classes AbstractSpriteIcon Icon for a minimap composed of a simple sprite. FixedSizeSpriteIcon Icon for a minimap composed of a simple sprite of a fixed pixel size. RelativeSizeSpriteIcon Icon for a minimap composed of a simple sprite of a relative size to its real world size. Interfaces IMinimapIcon Minimap Icon to display something on the minimap."
  },
  "api/nickmaltbie.MinimapTools.Icon.IMinimapIcon.html": {
    "href": "api/nickmaltbie.MinimapTools.Icon.IMinimapIcon.html",
    "title": "Interface IMinimapIcon | MinimapTools Documentation",
    "keywords": "Interface IMinimapIcon Minimap Icon to display something on the minimap. Namespace : nickmaltbie.MinimapTools.Icon Assembly : cs.temp.dll.dll Syntax public interface IMinimapIcon Methods CreateIcon(IMinimap, RectTransform) Create an icon to represent this object on the minimap. Declaration GameObject CreateIcon(IMinimap minimap, RectTransform minimapTransform) Parameters Type Name Description IMinimap minimap Reference to minimap this icon will be added to, useful for scaling and manipulating the icon RectTransform minimapTransform Transform of the parent minimap this is being added to. Returns Type Description GameObject The newly created icon for this object. GetIconRotation() Get the rotation of the object in world space. Declaration Quaternion GetIconRotation() Returns Type Description Quaternion The current rotation of the object in world space. GetWorldSize() If this element scales with the map size, this will scale the element to be larger or smaller based on its world size. Declaration Vector2 GetWorldSize() Returns Type Description Vector2 Size of the object in world units. GetWorldSpace() Get the location of this object in world space. Declaration Vector3 GetWorldSpace() Returns Type Description Vector3 Position of the object in world space. RotateWithMap() Should the element rotate with the map. Declaration bool RotateWithMap() Returns Type Description Boolean True if the element should rotate with the map, false otherwise. ScaleWithMap() Should the icon scale with the map scale. Declaration bool ScaleWithMap() Returns Type Description Boolean If true, will scale with the map, if false will not scale with the map."
  },
  "api/nickmaltbie.MinimapTools.Icon.RelativeSizeSpriteIcon.html": {
    "href": "api/nickmaltbie.MinimapTools.Icon.RelativeSizeSpriteIcon.html",
    "title": "Class RelativeSizeSpriteIcon | MinimapTools Documentation",
    "keywords": "Class RelativeSizeSpriteIcon Icon for a minimap composed of a simple sprite of a relative size to its real world size. Inheritance Object AbstractSpriteIcon RelativeSizeSpriteIcon Implements IMinimapIcon Inherited Members AbstractSpriteIcon.sprite AbstractSpriteIcon.rotateIcon AbstractSpriteIcon.GetWorldSpace() AbstractSpriteIcon.GetIconRotation() AbstractSpriteIcon.RotateWithMap() AbstractSpriteIcon.CreateIcon(IMinimap, RectTransform) Namespace : nickmaltbie.MinimapTools.Icon Assembly : cs.temp.dll.dll Syntax public class RelativeSizeSpriteIcon : AbstractSpriteIcon, IMinimapIcon Methods GetPixelSize(IMinimap) Size of the icon in pixels. Declaration public override Vector2Int GetPixelSize(IMinimap minimap) Parameters Type Name Description IMinimap minimap Minimap the icon will be drawn on. May affect the size of the icon. Returns Type Description Vector2Int Size of the icon in pixels. Overrides AbstractSpriteIcon.GetPixelSize(IMinimap) GetWorldSize() If this element scales with the map size, this will scale the element to be larger or smaller based on its world size. Declaration public override Vector2 GetWorldSize() Returns Type Description Vector2 Size of the object in world units. Overrides AbstractSpriteIcon.GetWorldSize() ScaleWithMap() Should the icon scale with the map scale. Declaration public override bool ScaleWithMap() Returns Type Description Boolean If true, will scale with the map, if false will not scale with the map. Overrides AbstractSpriteIcon.ScaleWithMap() Implements IMinimapIcon"
  },
  "api/nickmaltbie.MinimapTools.Minimap.AbstractMinimap.html": {
    "href": "api/nickmaltbie.MinimapTools.Minimap.AbstractMinimap.html",
    "title": "Class AbstractMinimap | MinimapTools Documentation",
    "keywords": "Class AbstractMinimap Abstract minimap that contains basic functions for minimap. Inheritance Object AbstractMinimap CenteredMinimap SimpleStaticMinimap Implements IMinimap Namespace : nickmaltbie.MinimapTools.Minimap Assembly : cs.temp.dll.dll Syntax public abstract class AbstractMinimap : MonoBehaviour, IMinimap Fields backgroundImage Background image for the minimap. Declaration protected Texture2D backgroundImage Field Value Type Description Texture2D backgroundRt Transform of background image. Declaration protected RectTransform backgroundRt Field Value Type Description RectTransform defaultShape Default bounds for the minimap. Declaration public static readonly MinimapSquare defaultShape Field Value Type Description MinimapSquare icons Collection of icons contained in this minimap. Declaration protected Dictionary<IMinimapIcon, GameObject> icons Field Value Type Description Dictionary < IMinimapIcon , GameObject > maskShape Shape of the minimap mask. Declaration protected Sprite maskShape Field Value Type Description Sprite Properties MapOffset Map offset for the minimap relative to the map size. A value of (0,0) would indicate centered map. A value of (1,1) would indicate shift the minimap by 1 unit of the minimap viewing area. Declaration public abstract Vector2 MapOffset { get; } Property Value Type Description Vector2 MapScale Scale factor for map on screen. Declaration public abstract float MapScale { get; } Property Value Type Description Single MinimapBounds Get the MinimapSquare version of the minimap bounds. Declaration protected MinimapSquare MinimapBounds { get; } Property Value Type Description MinimapSquare PixelsPerUnit Number of pixels per unit of the minimap size. Declaration public float PixelsPerUnit { get; } Property Value Type Description Single Returns the number of pixels per unit for sizing the minimap. Source Source of shape for the minimap. Declaration protected abstract MinimapBoundsSource Source { get; } Property Value Type Description MinimapBoundsSource Methods AddIcon(IMinimapIcon) Add an icon to the minimap. Declaration public virtual bool AddIcon(IMinimapIcon minimapIcon) Parameters Type Name Description IMinimapIcon minimapIcon Icon to add to the minimap. Returns Type Description Boolean True if the object was added successfully, false otherwise. Awake() Initial minimap setup. Declaration public virtual void Awake() GetMinimapPosition(Vector3) Translates a position from world space to normalized minimap space. Declaration public virtual Vector2 GetMinimapPosition(Vector3 worldPosition) Parameters Type Name Description Vector3 worldPosition Position of the object in world space. Returns Type Description Vector2 Normalized minimap position, will scale positions within the minimap to between (0,0) and (1,1). GetRotation() Get the rotation of the minimap with respect to the vertical axis. Declaration public float GetRotation() Returns Type Description Single Rotation of the minimap in degrees. GetSize() Get the size of the minimap texture in pixels. Declaration public Vector2Int GetSize() Returns Type Description Vector2Int Vector2Int of the width and height of the minimap. GetWorldBounds() Get the world bounds for the minimap. Declaration public IMinimapShape GetWorldBounds() Returns Type Description IMinimapShape World bound that the minimap represents. LateUpdate() Move each object following minimap rules. Declaration public virtual void LateUpdate() MapAxisHoriz() Direction of the axis horizontal along the minimap plane. Declaration public Vector3 MapAxisHoriz() Returns Type Description Vector3 Horizontal directional vector. MapAxisVert() Direction of the vertical axis along the minimap plane. Declaration public Vector3 MapAxisVert() Returns Type Description Vector3 Vertical direction vector. MapNormal() Get the normal vector for the plane of this minimap. Declaration public Vector3 MapNormal() Returns Type Description Vector3 Vector normal to the minimap plane. RemoveIcon(IMinimapIcon) Remove an icon from the minimap. Declaration public virtual bool RemoveIcon(IMinimapIcon minimapIcon) Parameters Type Name Description IMinimapIcon minimapIcon Icon to remove to the minimap. Returns Type Description Boolean True if the object was removed successfully, false otherwise. Start() Add any icons from the minimap to this object during the start. Declaration public virtual void Start() UpdateMinimapIconPosition(IMinimapIcon) Update the position of a minimap icon based on its current position. Declaration protected virtual void UpdateMinimapIconPosition(IMinimapIcon icon) Parameters Type Name Description IMinimapIcon icon icon to update position of. Implements IMinimap"
  },
  "api/nickmaltbie.MinimapTools.Minimap.Centered.CenteredMinimap.html": {
    "href": "api/nickmaltbie.MinimapTools.Minimap.Centered.CenteredMinimap.html",
    "title": "Class CenteredMinimap | MinimapTools Documentation",
    "keywords": "Class CenteredMinimap Centered minimap that follows a labeled object in the minimap. Inheritance Object AbstractMinimap CenteredMinimap Implements IMinimap Inherited Members AbstractMinimap.defaultShape AbstractMinimap.backgroundImage AbstractMinimap.maskShape AbstractMinimap.backgroundRt AbstractMinimap.icons AbstractMinimap.MinimapBounds AbstractMinimap.GetWorldBounds() AbstractMinimap.PixelsPerUnit AbstractMinimap.AddIcon(IMinimapIcon) AbstractMinimap.RemoveIcon(IMinimapIcon) AbstractMinimap.UpdateMinimapIconPosition(IMinimapIcon) AbstractMinimap.GetMinimapPosition(Vector3) AbstractMinimap.GetSize() AbstractMinimap.GetRotation() AbstractMinimap.MapNormal() AbstractMinimap.MapAxisHoriz() AbstractMinimap.MapAxisVert() Namespace : nickmaltbie.MinimapTools.Minimap.Centered Assembly : cs.temp.dll.dll Syntax public class CenteredMinimap : AbstractMinimap, IMinimap Fields followTargetTag Name of the tag to search for the follow target. Declaration public string followTargetTag Field Value Type Description String mapRadius Radius of the minimap in world units. Declaration public float mapRadius Field Value Type Description Single minimapBoundsTag Name of the tag to search for minimap bounds. Declaration public string minimapBoundsTag Field Value Type Description String rotateMinimap Should the minimap rotate with the follow target. Declaration public bool rotateMinimap Field Value Type Description Boolean Properties MapOffset Map offset for the minimap relative to the map size. A value of (0,0) would indicate centered map. A value of (1,1) would indicate shift the minimap by 1 unit of the minimap viewing area. Declaration public override Vector2 MapOffset { get; } Property Value Type Description Vector2 Overrides AbstractMinimap.MapOffset MapScale Declaration public override float MapScale { get; } Property Value Type Description Single Overrides AbstractMinimap.MapScale Source Source of shape for the minimap. Declaration protected override MinimapBoundsSource Source { get; } Property Value Type Description MinimapBoundsSource Overrides AbstractMinimap.Source Methods Awake() Setup initial configuration of minimap. Declaration public override void Awake() Overrides AbstractMinimap.Awake() LateUpdate() Move each object following minimap rules. Declaration public override void LateUpdate() Overrides AbstractMinimap.LateUpdate() Start() Declaration public override void Start() Overrides AbstractMinimap.Start() Implements IMinimap"
  },
  "api/nickmaltbie.MinimapTools.Minimap.Centered.html": {
    "href": "api/nickmaltbie.MinimapTools.Minimap.Centered.html",
    "title": "Namespace nickmaltbie.MinimapTools.Minimap.Centered | MinimapTools Documentation",
    "keywords": "Namespace nickmaltbie.MinimapTools.Minimap.Centered Classes CenteredMinimap Centered minimap that follows a labeled object in the minimap."
  },
  "api/nickmaltbie.MinimapTools.Minimap.html": {
    "href": "api/nickmaltbie.MinimapTools.Minimap.html",
    "title": "Namespace nickmaltbie.MinimapTools.Minimap | MinimapTools Documentation",
    "keywords": "Namespace nickmaltbie.MinimapTools.Minimap Classes AbstractMinimap Abstract minimap that contains basic functions for minimap. Interfaces IMinimap Minimap for managing state."
  },
  "api/nickmaltbie.MinimapTools.Minimap.IMinimap.html": {
    "href": "api/nickmaltbie.MinimapTools.Minimap.IMinimap.html",
    "title": "Interface IMinimap | MinimapTools Documentation",
    "keywords": "Interface IMinimap Minimap for managing state. Namespace : nickmaltbie.MinimapTools.Minimap Assembly : cs.temp.dll.dll Syntax public interface IMinimap Properties PixelsPerUnit Number of pixels per unit of the minimap size. Declaration float PixelsPerUnit { get; } Property Value Type Description Single Returns the number of pixels per unit for sizing the minimap. Methods AddIcon(IMinimapIcon) Add an icon to the minimap. Declaration bool AddIcon(IMinimapIcon minimapIcon) Parameters Type Name Description IMinimapIcon minimapIcon Icon to add to the minimap. Returns Type Description Boolean True if the object was added successfully, false otherwise. GetMinimapPosition(Vector3) Translates a position from world space to normalized minimap space. Declaration Vector2 GetMinimapPosition(Vector3 worldPosition) Parameters Type Name Description Vector3 worldPosition Position of the object in world space. Returns Type Description Vector2 Normalized minimap position, will scale positions within the minimap to between (0,0) and (1,1). GetRotation() Get the rotation of the minimap with respect to the vertical axis. Declaration float GetRotation() Returns Type Description Single Rotation of the minimap in degrees. GetSize() Get the size of the minimap texture in pixels. Declaration Vector2Int GetSize() Returns Type Description Vector2Int Vector2Int of the width and height of the minimap. GetWorldBounds() Get the world bounds for the minimap. Declaration IMinimapShape GetWorldBounds() Returns Type Description IMinimapShape World bound that the minimap represents. MapAxisHoriz() Direction of the axis horizontal along the minimap plane. Declaration Vector3 MapAxisHoriz() Returns Type Description Vector3 Horizontal directional vector. MapAxisVert() Direction of the vertical axis along the minimap plane. Declaration Vector3 MapAxisVert() Returns Type Description Vector3 Vertical direction vector. MapNormal() Get the normal vector for the plane of this minimap. Declaration Vector3 MapNormal() Returns Type Description Vector3 Vector normal to the minimap plane. RemoveIcon(IMinimapIcon) Remove an icon from the minimap. Declaration bool RemoveIcon(IMinimapIcon minimapIcon) Parameters Type Name Description IMinimapIcon minimapIcon Icon to remove to the minimap. Returns Type Description Boolean True if the object was removed successfully, false otherwise."
  },
  "api/nickmaltbie.MinimapTools.Minimap.Shape.html": {
    "href": "api/nickmaltbie.MinimapTools.Minimap.Shape.html",
    "title": "Namespace nickmaltbie.MinimapTools.Minimap.Shape | MinimapTools Documentation",
    "keywords": "Namespace nickmaltbie.MinimapTools.Minimap.Shape Classes MinimapBoundsSource Source of bounds for a minimap or minimap object in the world MinimapSquare Source of bounds for a minimap or minimap object. Interfaces IMinimapShape Source of bounds for a minimap or minimap object."
  },
  "api/nickmaltbie.MinimapTools.Minimap.Shape.IMinimapShape.html": {
    "href": "api/nickmaltbie.MinimapTools.Minimap.Shape.IMinimapShape.html",
    "title": "Interface IMinimapShape | MinimapTools Documentation",
    "keywords": "Interface IMinimapShape Source of bounds for a minimap or minimap object. Namespace : nickmaltbie.MinimapTools.Minimap.Shape Assembly : cs.temp.dll.dll Syntax public interface IMinimapShape Properties Center Get the center of this minimap shape in world space. Declaration Vector3 Center { get; } Property Value Type Description Vector3 Position of the object in world space. Size Get the size of this minimap object in world space. Declaration Vector2 Size { get; } Property Value Type Description Vector2 2D size of the object in world space (only xz axis). Methods MapAxisHoriz() Direction of the axis horizontal along the minimap plane. Declaration Vector3 MapAxisHoriz() Returns Type Description Vector3 Horizontal directional vector. MapAxisVert() Direction of the vertical axis along the minimap plane. Declaration Vector3 MapAxisVert() Returns Type Description Vector3 Vertical direction vector. MapNormal() Get the normal vector for the plane of this minimap. Declaration Vector3 MapNormal() Returns Type Description Vector3 Vector normal to the minimap plane."
  },
  "api/nickmaltbie.MinimapTools.Minimap.Shape.MinimapBoundsSource.html": {
    "href": "api/nickmaltbie.MinimapTools.Minimap.Shape.MinimapBoundsSource.html",
    "title": "Class MinimapBoundsSource | MinimapTools Documentation",
    "keywords": "Class MinimapBoundsSource Source of bounds for a minimap or minimap object in the world Inheritance Object MinimapBoundsSource Namespace : nickmaltbie.MinimapTools.Minimap.Shape Assembly : cs.temp.dll.dll Syntax public class MinimapBoundsSource : MonoBehaviour Fields minimapShape Shape of the minimap. Declaration public MinimapSquare minimapShape Field Value Type Description MinimapSquare Methods GetShape() Gets the shape of the minimap. Declaration public MinimapSquare GetShape() Returns Type Description MinimapSquare The shape of the minimap as a MinimapSquare object."
  },
  "api/nickmaltbie.MinimapTools.Minimap.Shape.MinimapSquare.html": {
    "href": "api/nickmaltbie.MinimapTools.Minimap.Shape.MinimapSquare.html",
    "title": "Class MinimapSquare | MinimapTools Documentation",
    "keywords": "Class MinimapSquare Source of bounds for a minimap or minimap object. Inheritance Object MinimapSquare Implements IMinimapShape Namespace : nickmaltbie.MinimapTools.Minimap.Shape Assembly : cs.temp.dll.dll Syntax public class MinimapSquare : IMinimapShape Constructors MinimapSquare(Vector3, Vector3, Quaternion) Create a minimap square with a given configuration. Declaration public MinimapSquare(Vector3 center, Vector3 size, Quaternion rotation) Parameters Type Name Description Vector3 center Center of the object in world space. Vector3 size Size of the object in world space. Quaternion rotation Rotation of the object in 3D space for the plane. Fields center Center of the object in minimap space. Declaration public Vector3 center Field Value Type Description Vector3 lockAspectRatio Should the aspect ratio of the size be locked. Declaration public bool lockAspectRatio Field Value Type Description Boolean rotation Rotation of the object about the vertical axis. Declaration public Quaternion rotation Field Value Type Description Quaternion size Size of the object in world space. Declaration public Vector2 size Field Value Type Description Vector2 Properties Center Get the center of this minimap shape in world space. Declaration public Vector3 Center { get; } Property Value Type Description Vector3 Position of the object in world space. Size Get the size of this minimap object in world space. Declaration public Vector2 Size { get; } Property Value Type Description Vector2 2D size of the object in world space (only xz axis). Methods ConvertToMinimapPlane(Vector3) Get the position of an element from world space to minimap space. Declaration public Vector2 ConvertToMinimapPlane(Vector3 worldSpace) Parameters Type Name Description Vector3 worldSpace Position in world space. Returns Type Description Vector2 Position in minimap space. GetWorldSpaceCorners(Nullable<Vector3>) Get the corners of the minimap in world space. Declaration public Vector3[] GetWorldSpaceCorners(Vector3? offset) Parameters Type Name Description Nullable < Vector3 > offset Offset from center in world space. Returns Type Description Vector3 [] Four corners of the minimap as vector 3 in world space. MapAxisHoriz() Direction of the axis horizontal along the minimap plane. Declaration public Vector3 MapAxisHoriz() Returns Type Description Vector3 Horizontal directional vector. MapAxisVert() Direction of the vertical axis along the minimap plane. Declaration public Vector3 MapAxisVert() Returns Type Description Vector3 Vertical direction vector. MapNormal() Get the normal vector for the plane of this minimap. Declaration public Vector3 MapNormal() Returns Type Description Vector3 Vector normal to the minimap plane. Implements IMinimapShape"
  },
  "api/nickmaltbie.MinimapTools.Minimap.Simple.html": {
    "href": "api/nickmaltbie.MinimapTools.Minimap.Simple.html",
    "title": "Namespace nickmaltbie.MinimapTools.Minimap.Simple | MinimapTools Documentation",
    "keywords": "Namespace nickmaltbie.MinimapTools.Minimap.Simple Classes SimpleStaticMinimap Simple, static minimap that does not move (static) and simply displays objects on top of a pre-rendered background image. Icons added to the map will have their position updated each frame to follow the minimap."
  },
  "api/nickmaltbie.MinimapTools.Minimap.Simple.SimpleStaticMinimap.html": {
    "href": "api/nickmaltbie.MinimapTools.Minimap.Simple.SimpleStaticMinimap.html",
    "title": "Class SimpleStaticMinimap | MinimapTools Documentation",
    "keywords": "Class SimpleStaticMinimap Simple, static minimap that does not move (static) and simply displays objects on top of a pre-rendered background image. Icons added to the map will have their position updated each frame to follow the minimap. Inheritance Object AbstractMinimap SimpleStaticMinimap Implements IMinimap Inherited Members AbstractMinimap.defaultShape AbstractMinimap.backgroundImage AbstractMinimap.maskShape AbstractMinimap.backgroundRt AbstractMinimap.icons AbstractMinimap.MinimapBounds AbstractMinimap.GetWorldBounds() AbstractMinimap.PixelsPerUnit AbstractMinimap.LateUpdate() AbstractMinimap.AddIcon(IMinimapIcon) AbstractMinimap.RemoveIcon(IMinimapIcon) AbstractMinimap.UpdateMinimapIconPosition(IMinimapIcon) AbstractMinimap.GetMinimapPosition(Vector3) AbstractMinimap.GetSize() AbstractMinimap.GetRotation() AbstractMinimap.MapNormal() AbstractMinimap.MapAxisHoriz() AbstractMinimap.MapAxisVert() Namespace : nickmaltbie.MinimapTools.Minimap.Simple Assembly : cs.temp.dll.dll Syntax public class SimpleStaticMinimap : AbstractMinimap, IMinimap Properties MapOffset Map offset for the minimap relative to the map size. A value of (0,0) would indicate centered map. A value of (1,1) would indicate shift the minimap by 1 unit of the minimap viewing area. Declaration public override Vector2 MapOffset { get; } Property Value Type Description Vector2 Overrides AbstractMinimap.MapOffset MapScale Scale factor for map on screen. Declaration public override float MapScale { get; } Property Value Type Description Single Overrides AbstractMinimap.MapScale Source Source of shape for the minimap. Declaration protected override MinimapBoundsSource Source { get; } Property Value Type Description MinimapBoundsSource Overrides AbstractMinimap.Source Methods Awake() Declaration public override void Awake() Overrides AbstractMinimap.Awake() Start() Declaration public override void Start() Overrides AbstractMinimap.Start() Implements IMinimap"
  },
  "api/nickmaltbie.MinimapTools.TestCommon.html": {
    "href": "api/nickmaltbie.MinimapTools.TestCommon.html",
    "title": "Namespace nickmaltbie.MinimapTools.TestCommon | MinimapTools Documentation",
    "keywords": "Namespace nickmaltbie.MinimapTools.TestCommon Classes TestBase Basic unity test base class. TestBase.GizmoValidator Basic mono behavior for validating gizmo behavior TestUtils Unity test utilities. Enums TestUtils.BoundRange Bound range for test utils validation of number in range."
  },
  "api/nickmaltbie.MinimapTools.TestCommon.TestBase.GizmoValidator.html": {
    "href": "api/nickmaltbie.MinimapTools.TestCommon.TestBase.GizmoValidator.html",
    "title": "Class TestBase.GizmoValidator | MinimapTools Documentation",
    "keywords": "Class TestBase.GizmoValidator Basic mono behavior for validating gizmo behavior Inheritance Object TestBase.GizmoValidator Namespace : nickmaltbie.MinimapTools.TestCommon Assembly : cs.temp.dll.dll Syntax public class GizmoValidator : MonoBehaviour Properties GizmoAction Gizmo action to validate. Declaration public Action GizmoAction { get; set; } Property Value Type Description Action Invoked Has the gizmo action been invoked. Declaration public bool Invoked { get; set; } Property Value Type Description Boolean Methods OnDrawGizmos() Declaration public void OnDrawGizmos() ValidateGizmosDrawn(Int32, Boolean) Declaration public IEnumerator ValidateGizmosDrawn(int maxIter = 60, bool assertValidation = false) Parameters Type Name Description Int32 maxIter Boolean assertValidation Returns Type Description IEnumerator"
  },
  "api/nickmaltbie.MinimapTools.TestCommon.TestBase.html": {
    "href": "api/nickmaltbie.MinimapTools.TestCommon.TestBase.html",
    "title": "Class TestBase | MinimapTools Documentation",
    "keywords": "Class TestBase Basic unity test base class. Inheritance Object TestBase Namespace : nickmaltbie.MinimapTools.TestCommon Assembly : cs.temp.dll.dll Syntax public class TestBase : InputTestFixture Fields createdDevices List of created input devices. Declaration protected List<InputDevice> createdDevices Field Value Type Description List < InputDevice > gameObjects List of game objects created as part of the test. Declaration protected List<GameObject> gameObjects Field Value Type Description List < GameObject > scriptableObjects List of scriptable objects created as part of the test. Declaration protected List<ScriptableObject> scriptableObjects Field Value Type Description List < ScriptableObject > Methods CreateGameObject() Create a game object and save it to cleanup at the end of the test. Declaration protected GameObject CreateGameObject() Returns Type Description GameObject Created game object. CreateGameObject(GameObject) Create a game object and save it to cleanup at the end of the test. Declaration protected GameObject CreateGameObject(GameObject original) Parameters Type Name Description GameObject original Original object to create from base. Returns Type Description GameObject Created game object. CreateScriptableObject<E>() Create a scriptable object and register it as part of the test. Declaration protected E CreateScriptableObject<E>() where E : ScriptableObject Returns Type Description E Created scriptable object. Type Parameters Name Description E Type of scriptable object to create. OneTimeSetUp() Setup a basic test. Declaration public virtual void OneTimeSetUp() RegisterGameObject(GameObject) Register a game object as part of a test to cleanup once the test is completed. Declaration protected void RegisterGameObject(GameObject go) Parameters Type Name Description GameObject go Game object to register. RegisterInputDevice(InputDevice) Register an InputDevice as part of a test to cleanup once the test is completed. Declaration protected void RegisterInputDevice(InputDevice device) Parameters Type Name Description InputDevice device InputDevice to register. RegisterScriptableObject(ScriptableObject) Register a ScriptableObject as part of a test to cleanup once the test is completed. Declaration protected void RegisterScriptableObject(ScriptableObject so) Parameters Type Name Description ScriptableObject so ScriptableObject to register. SetupInputDevice<E>() Setup an input device and given action map. Declaration public (E, PlayerInput, InputActionMap) SetupInputDevice<E>() where E : InputDevice Returns Type Description (T1, T2, T3) <E, PlayerInput , InputActionMap > Tuple of the input device, player input, and created action map. Type Parameters Name Description E Type of device craeted. TearDown() Cleanup created objects in the basic test. Declaration public override void TearDown() TestDirections() Set of basic directions for tests. Declaration public static IEnumerable<Vector3> TestDirections() Returns Type Description IEnumerable < Vector3 > UnityTearDown() Cleanup created objects in the basic test. Declaration public virtual void UnityTearDown() ValidateDrawGizmo(Action, Int32, Boolean) Validate that given gizmos are drawn. Declaration public IEnumerator ValidateDrawGizmo(Action GizmoAction, int maxIter = 60, bool assertDrawn = false) Parameters Type Name Description Action GizmoAction Gizmo action to validate. Int32 maxIter Boolean assertDrawn Returns Type Description IEnumerator"
  },
  "api/nickmaltbie.MinimapTools.TestCommon.TestUtils.BoundRange.html": {
    "href": "api/nickmaltbie.MinimapTools.TestCommon.TestUtils.BoundRange.html",
    "title": "Enum TestUtils.BoundRange | MinimapTools Documentation",
    "keywords": "Enum TestUtils.BoundRange Bound range for test utils validation of number in range. Namespace : nickmaltbie.MinimapTools.TestCommon Assembly : cs.temp.dll.dll Syntax public enum BoundRange Fields Name Description GraterThan GraterThanOrLessThan LessThan"
  },
  "api/nickmaltbie.MinimapTools.TestCommon.TestUtils.html": {
    "href": "api/nickmaltbie.MinimapTools.TestCommon.TestUtils.html",
    "title": "Class TestUtils | MinimapTools Documentation",
    "keywords": "Class TestUtils Unity test utilities. Inheritance Object TestUtils Namespace : nickmaltbie.MinimapTools.TestCommon Assembly : cs.temp.dll.dll Syntax public static class TestUtils Methods AssertInBounds(Single, Single, Single, String, TestUtils.BoundRange) Assert that a float value is within a specific bound. Declaration public static void AssertInBounds(float actual, float expected, float range = 0.001F, string errorMsg = null, TestUtils.BoundRange bound = TestUtils.BoundRange.GraterThanOrLessThan) Parameters Type Name Description Single actual Actual value. Single expected Expected value. Single range Acceptable range of error. String errorMsg Error message to log if failure, one will be generated if none is provided. TestUtils.BoundRange bound Allow the actual value to be lesser, grater, or either. AssertInBounds((Single, Single), (Single, Single), Single, String, TestUtils.BoundRange) Assert that two vectors are within a specific bound of each other. Declaration public static void AssertInBounds((float, float) actual, (float, float) expected, float range = 0.001F, string errorMsg = null, TestUtils.BoundRange bound = TestUtils.BoundRange.GraterThanOrLessThan) Parameters Type Name Description (T1, T2) < Single , Single > actual Actual vector found. (T1, T2) < Single , Single > expected Expected vector to find. Single range Range in units of acceptable error. String errorMsg Error message to log if failure, one will be generated if none is provided. TestUtils.BoundRange bound Allow the actual vector to be shorter, longer, or either. AssertInBounds(Vector2, Vector2, Single, String, TestUtils.BoundRange) Assert that two vectors are within a specific bound of each other. Declaration public static void AssertInBounds(Vector2 actual, Vector2 expected, float range = 0.001F, string errorMsg = null, TestUtils.BoundRange bound = TestUtils.BoundRange.GraterThanOrLessThan) Parameters Type Name Description Vector2 actual Actual vector found. Vector2 expected Expected vector to find. Single range Range in units of acceptable error. String errorMsg Error message to log if failure, one will be generated if none is provided. TestUtils.BoundRange bound Allow the actual vector to be shorter, longer, or either. AssertInBounds(Vector3, Vector3, Single, String, TestUtils.BoundRange) Assert that two vectors are within a specific bound of each other. Declaration public static void AssertInBounds(Vector3 actual, Vector3 expected, float range = 0.001F, string errorMsg = null, TestUtils.BoundRange bound = TestUtils.BoundRange.GraterThanOrLessThan) Parameters Type Name Description Vector3 actual Actual vector found. Vector3 expected Expected vector to find. Single range Range in units of acceptable error. String errorMsg Error message to log if failure, one will be generated if none is provided. TestUtils.BoundRange bound Allow the actual vector to be shorter, longer, or either. AssertInBounds(Vector4, Vector4, Single, String, TestUtils.BoundRange) Assert that two vectors are within a specific bound of each other. Declaration public static void AssertInBounds(Vector4 actual, Vector4 expected, float range = 0.001F, string errorMsg = null, TestUtils.BoundRange bound = TestUtils.BoundRange.GraterThanOrLessThan) Parameters Type Name Description Vector4 actual Actual vector found. Vector4 expected Expected vector to find. Single range Range in units of acceptable error. String errorMsg Error message to log if failure, one will be generated if none is provided. TestUtils.BoundRange bound Allow the actual vector to be shorter, longer, or either."
  },
  "api/nickmaltbie.MinimapTools.Tests.EditMode.Background.BackgroundTextureTests.html": {
    "href": "api/nickmaltbie.MinimapTools.Tests.EditMode.Background.BackgroundTextureTests.html",
    "title": "Class BackgroundTextureTests | MinimapTools Documentation",
    "keywords": "Class BackgroundTextureTests Tests for the BackgroundTexture Inheritance Object BackgroundTextureTests Namespace : nickmaltbie.MinimapTools.Tests.EditMode.Background Assembly : cs.temp.dll.dll Syntax public class BackgroundTextureTests : TestBase Methods Validate_BackgroundTexture_SetupBGColor() Declaration public void Validate_BackgroundTexture_SetupBGColor() Validate_BackgroundTexture_SetupTexture() Declaration public void Validate_BackgroundTexture_SetupTexture()"
  },
  "api/nickmaltbie.MinimapTools.Tests.EditMode.Background.BoxMinimapElementTests.html": {
    "href": "api/nickmaltbie.MinimapTools.Tests.EditMode.Background.BoxMinimapElementTests.html",
    "title": "Class BoxMinimapElementTests | MinimapTools Documentation",
    "keywords": "Class BoxMinimapElementTests Tests for the BoxMinimapElement Inheritance Object BoxMinimapElementTests Namespace : nickmaltbie.MinimapTools.Tests.EditMode.Background Assembly : cs.temp.dll.dll Syntax public class BoxMinimapElementTests : TestBase Fields TestColors Declaration public static IEnumerable<Color> TestColors Field Value Type Description IEnumerable < Color > Methods SetUp() Declaration public void SetUp() Validate_BoxMinimapElement_DrawOnBackground(Color) Declaration public void Validate_BoxMinimapElement_DrawOnBackground(Color color) Parameters Type Name Description Color color Validate_BoxMinimapElement_DrawOnBackground_Rotated(Color) Declaration public void Validate_BoxMinimapElement_DrawOnBackground_Rotated(Color color) Parameters Type Name Description Color color Validate_BoxMinimapElement_GetTexture(Color) Declaration public void Validate_BoxMinimapElement_GetTexture(Color color) Parameters Type Name Description Color color"
  },
  "api/nickmaltbie.MinimapTools.Tests.EditMode.Background.html": {
    "href": "api/nickmaltbie.MinimapTools.Tests.EditMode.Background.html",
    "title": "Namespace nickmaltbie.MinimapTools.Tests.EditMode.Background | MinimapTools Documentation",
    "keywords": "Namespace nickmaltbie.MinimapTools.Tests.EditMode.Background Classes BackgroundTextureTests Tests for the BackgroundTexture BoxMinimapElementTests Tests for the BoxMinimapElement SpriteMinimapElementTests Tests for the SpriteMinimapElement"
  },
  "api/nickmaltbie.MinimapTools.Tests.EditMode.Background.SpriteMinimapElementTests.html": {
    "href": "api/nickmaltbie.MinimapTools.Tests.EditMode.Background.SpriteMinimapElementTests.html",
    "title": "Class SpriteMinimapElementTests | MinimapTools Documentation",
    "keywords": "Class SpriteMinimapElementTests Tests for the SpriteMinimapElement Inheritance Object SpriteMinimapElementTests Namespace : nickmaltbie.MinimapTools.Tests.EditMode.Background Assembly : cs.temp.dll.dll Syntax public class SpriteMinimapElementTests : TestBase Methods SetUp() Declaration public void SetUp() Validate_SpriteMinimapElement_DrawOnBackground() Declaration public void Validate_SpriteMinimapElement_DrawOnBackground() Validate_SpriteMinimapElement_GetTexture() Declaration public void Validate_SpriteMinimapElement_GetTexture()"
  },
  "api/nickmaltbie.MinimapTools.Tests.EditMode.Icon.FixedSizeSpriteIconTests.html": {
    "href": "api/nickmaltbie.MinimapTools.Tests.EditMode.Icon.FixedSizeSpriteIconTests.html",
    "title": "Class FixedSizeSpriteIconTests | MinimapTools Documentation",
    "keywords": "Class FixedSizeSpriteIconTests Tests for the FixedSizeSpriteIcon Inheritance Object FixedSizeSpriteIconTests Namespace : nickmaltbie.MinimapTools.Tests.EditMode.Icon Assembly : cs.temp.dll.dll Syntax public class FixedSizeSpriteIconTests : TestBase Methods Validate_FixedSizeSpriteIcon(Int32, Int32) Declaration public void Validate_FixedSizeSpriteIcon(int width, int height) Parameters Type Name Description Int32 width Int32 height"
  },
  "api/nickmaltbie.MinimapTools.Tests.EditMode.Icon.html": {
    "href": "api/nickmaltbie.MinimapTools.Tests.EditMode.Icon.html",
    "title": "Namespace nickmaltbie.MinimapTools.Tests.EditMode.Icon | MinimapTools Documentation",
    "keywords": "Namespace nickmaltbie.MinimapTools.Tests.EditMode.Icon Classes FixedSizeSpriteIconTests Tests for the FixedSizeSpriteIcon RelativeSizeSpriteIconTests Tests for the RelativeSizeSpriteIcon"
  },
  "api/nickmaltbie.MinimapTools.Tests.EditMode.Icon.RelativeSizeSpriteIconTests.html": {
    "href": "api/nickmaltbie.MinimapTools.Tests.EditMode.Icon.RelativeSizeSpriteIconTests.html",
    "title": "Class RelativeSizeSpriteIconTests | MinimapTools Documentation",
    "keywords": "Class RelativeSizeSpriteIconTests Tests for the RelativeSizeSpriteIcon Inheritance Object RelativeSizeSpriteIconTests Namespace : nickmaltbie.MinimapTools.Tests.EditMode.Icon Assembly : cs.temp.dll.dll Syntax public class RelativeSizeSpriteIconTests : TestBase Methods Validate_RelativeSizeSpriteIcon(Int32, Int32, Int32) Declaration public void Validate_RelativeSizeSpriteIcon(int width, int height, int pixelScale) Parameters Type Name Description Int32 width Int32 height Int32 pixelScale"
  },
  "api/nickmaltbie.MinimapTools.Tests.EditMode.Minimap.AbstractMinimapTests.html": {
    "href": "api/nickmaltbie.MinimapTools.Tests.EditMode.Minimap.AbstractMinimapTests.html",
    "title": "Class AbstractMinimapTests | MinimapTools Documentation",
    "keywords": "Class AbstractMinimapTests Tests for the AbstractMinimap Inheritance Object AbstractMinimapTests Namespace : nickmaltbie.MinimapTools.Tests.EditMode.Minimap Assembly : cs.temp.dll.dll Syntax public class AbstractMinimapTests : TestBase Methods SetUp() Declaration public void SetUp() Verify_AbstractMinimap_Directions() Declaration public void Verify_AbstractMinimap_Directions() Verify_AbstractMinimap_DrawOrder(Int32, Int32, Int32) Declaration public void Verify_AbstractMinimap_DrawOrder(int p1, int p2, int p3) Parameters Type Name Description Int32 p1 Int32 p2 Int32 p3 Verify_AbstractMinimap_IconPlacement(Boolean, Boolean) Declaration public void Verify_AbstractMinimap_IconPlacement(bool rotateWithMap, bool scaleWithMap) Parameters Type Name Description Boolean rotateWithMap Boolean scaleWithMap Verify_AbstractMinimap_PixelsPerUnit(Single) Declaration public void Verify_AbstractMinimap_PixelsPerUnit(float scale) Parameters Type Name Description Single scale Verify_AbstractMinimap_UninitializedShape() Declaration public void Verify_AbstractMinimap_UninitializedShape() Verify_AbstractMinimapDrawElements() Declaration public void Verify_AbstractMinimapDrawElements()"
  },
  "api/nickmaltbie.MinimapTools.Tests.EditMode.Minimap.CenteredMinimapTests.html": {
    "href": "api/nickmaltbie.MinimapTools.Tests.EditMode.Minimap.CenteredMinimapTests.html",
    "title": "Class CenteredMinimapTests | MinimapTools Documentation",
    "keywords": "Class CenteredMinimapTests Tests for the CenteredMinimap Inheritance Object CenteredMinimapTests Namespace : nickmaltbie.MinimapTools.Tests.EditMode.Minimap Assembly : cs.temp.dll.dll Syntax public class CenteredMinimapTests : TestBase Methods SetUp() Declaration public void SetUp() Validate_SimpleStaticMinimap_LateUpdate() Simple sample script test to validate setup and update functions. Declaration public void Validate_SimpleStaticMinimap_LateUpdate() Validate_SimpleStaticMinimap_MoveWithTarget(Single) Simple sample script test to move with the target. Declaration public void Validate_SimpleStaticMinimap_MoveWithTarget(float scale) Parameters Type Name Description Single scale"
  },
  "api/nickmaltbie.MinimapTools.Tests.EditMode.Minimap.ExampleMinimap.html": {
    "href": "api/nickmaltbie.MinimapTools.Tests.EditMode.Minimap.ExampleMinimap.html",
    "title": "Class ExampleMinimap | MinimapTools Documentation",
    "keywords": "Class ExampleMinimap Inheritance Object ExampleMinimap Namespace : nickmaltbie.MinimapTools.Tests.EditMode.Minimap Assembly : cs.temp.dll.dll Syntax public class ExampleMinimap : AbstractMinimap Fields boundsSource Declaration public MinimapBoundsSource boundsSource Field Value Type Description MinimapBoundsSource Properties MapOffset Declaration public override Vector2 MapOffset { get; } Property Value Type Description Vector2 MapScale Declaration public override float MapScale { get; } Property Value Type Description Single Source Declaration protected override MinimapBoundsSource Source { get; } Property Value Type Description MinimapBoundsSource"
  },
  "api/nickmaltbie.MinimapTools.Tests.EditMode.Minimap.ExampleMinimapElement.html": {
    "href": "api/nickmaltbie.MinimapTools.Tests.EditMode.Minimap.ExampleMinimapElement.html",
    "title": "Class ExampleMinimapElement | MinimapTools Documentation",
    "keywords": "Class ExampleMinimapElement Inheritance Object AbstractMinimapElement ExampleMinimapElement Implements IMinimapElement Inherited Members AbstractMinimapElement.drawOrder AbstractMinimapElement.GetOrder() Namespace : nickmaltbie.MinimapTools.Tests.EditMode.Minimap Assembly : cs.temp.dll.dll Syntax public class ExampleMinimapElement : AbstractMinimapElement, IMinimapElement Fields drawCount Declaration public int drawCount Field Value Type Description Int32 Properties DrawnOrder Declaration public int DrawnOrder { get; } Property Value Type Description Int32 Methods DrawOnBackground(IMinimap, Texture2D) Declaration public override void DrawOnBackground(IMinimap minimap, Texture2D backgroundTexture) Parameters Type Name Description IMinimap minimap Texture2D backgroundTexture Overrides AbstractMinimapElement.DrawOnBackground(IMinimap, Texture2D) GetRotation() Declaration public override float GetRotation() Returns Type Description Single Overrides AbstractMinimapElement.GetRotation() GetTexture(IMinimap) Declaration public override Texture2D GetTexture(IMinimap minimap) Parameters Type Name Description IMinimap minimap Returns Type Description Texture2D Overrides AbstractMinimapElement.GetTexture(IMinimap) WorldCenter() Declaration public override Vector3 WorldCenter() Returns Type Description Vector3 Overrides AbstractMinimapElement.WorldCenter() Implements IMinimapElement"
  },
  "api/nickmaltbie.MinimapTools.Tests.EditMode.Minimap.ExampleMinimapIcon.html": {
    "href": "api/nickmaltbie.MinimapTools.Tests.EditMode.Minimap.ExampleMinimapIcon.html",
    "title": "Class ExampleMinimapIcon | MinimapTools Documentation",
    "keywords": "Class ExampleMinimapIcon Inheritance Object ExampleMinimapIcon Namespace : nickmaltbie.MinimapTools.Tests.EditMode.Minimap Assembly : cs.temp.dll.dll Syntax public class ExampleMinimapIcon : AbstractSpriteIcon Fields pixelSize Declaration public Vector2Int pixelSize Field Value Type Description Vector2Int scaleWithMap Declaration public bool scaleWithMap Field Value Type Description Boolean Methods GetPixelSize(IMinimap) Declaration public override Vector2Int GetPixelSize(IMinimap minimap) Parameters Type Name Description IMinimap minimap Returns Type Description Vector2Int ScaleWithMap() Declaration public override bool ScaleWithMap() Returns Type Description Boolean"
  },
  "api/nickmaltbie.MinimapTools.Tests.EditMode.Minimap.html": {
    "href": "api/nickmaltbie.MinimapTools.Tests.EditMode.Minimap.html",
    "title": "Namespace nickmaltbie.MinimapTools.Tests.EditMode.Minimap | MinimapTools Documentation",
    "keywords": "Namespace nickmaltbie.MinimapTools.Tests.EditMode.Minimap Classes AbstractMinimapTests Tests for the AbstractMinimap CenteredMinimapTests Tests for the CenteredMinimap ExampleMinimap ExampleMinimapElement ExampleMinimapIcon SimpleStaticMinimapTests Tests for the SimpleStaticMinimap"
  },
  "api/nickmaltbie.MinimapTools.Tests.EditMode.Minimap.SimpleStaticMinimapTests.html": {
    "href": "api/nickmaltbie.MinimapTools.Tests.EditMode.Minimap.SimpleStaticMinimapTests.html",
    "title": "Class SimpleStaticMinimapTests | MinimapTools Documentation",
    "keywords": "Class SimpleStaticMinimapTests Tests for the SimpleStaticMinimap Inheritance Object SimpleStaticMinimapTests Namespace : nickmaltbie.MinimapTools.Tests.EditMode.Minimap Assembly : cs.temp.dll.dll Syntax public class SimpleStaticMinimapTests : TestBase Methods SetUp() Declaration public void SetUp() Validate_SimpleStaticMinimap_LateUpdate() Simple sample script test to validate setup and update functions. Declaration public void Validate_SimpleStaticMinimap_LateUpdate() Validate_SimpleStaticMinimap_RemoveIcon() Simple sample script test to validate remove function. Declaration public void Validate_SimpleStaticMinimap_RemoveIcon()"
  },
  "api/nickmaltbie.MinimapTools.Tests.EditMode.Shape.html": {
    "href": "api/nickmaltbie.MinimapTools.Tests.EditMode.Shape.html",
    "title": "Namespace nickmaltbie.MinimapTools.Tests.EditMode.Shape | MinimapTools Documentation",
    "keywords": "Namespace nickmaltbie.MinimapTools.Tests.EditMode.Shape Classes MinimapSquareTests Tests for the MinimapSquare"
  },
  "api/nickmaltbie.MinimapTools.Tests.EditMode.Shape.MinimapSquareTests.html": {
    "href": "api/nickmaltbie.MinimapTools.Tests.EditMode.Shape.MinimapSquareTests.html",
    "title": "Class MinimapSquareTests | MinimapTools Documentation",
    "keywords": "Class MinimapSquareTests Tests for the MinimapSquare Inheritance Object MinimapSquareTests Namespace : nickmaltbie.MinimapTools.Tests.EditMode.Shape Assembly : cs.temp.dll.dll Syntax public class MinimapSquareTests Methods Validate_MinimapSquare_Normal() Declaration public void Validate_MinimapSquare_Normal() Validate_MinimapSquare_Rotated(Single, Single, Single) Declaration public void Validate_MinimapSquare_Rotated(float rotationX, float rotationY, float rotationZ) Parameters Type Name Description Single rotationX Single rotationY Single rotationZ"
  },
  "api/nickmaltbie.MinimapTools.Tests.EditMode.Utils.html": {
    "href": "api/nickmaltbie.MinimapTools.Tests.EditMode.Utils.html",
    "title": "Namespace nickmaltbie.MinimapTools.Tests.EditMode.Utils | MinimapTools Documentation",
    "keywords": "Namespace nickmaltbie.MinimapTools.Tests.EditMode.Utils Classes TextureUtilsTests Tests for the TextureUtils"
  },
  "api/nickmaltbie.MinimapTools.Tests.EditMode.Utils.TextureUtilsTests.html": {
    "href": "api/nickmaltbie.MinimapTools.Tests.EditMode.Utils.TextureUtilsTests.html",
    "title": "Class TextureUtilsTests | MinimapTools Documentation",
    "keywords": "Class TextureUtilsTests Tests for the TextureUtils Inheritance Object TextureUtilsTests Namespace : nickmaltbie.MinimapTools.Tests.EditMode.Utils Assembly : cs.temp.dll.dll Syntax public class TextureUtilsTests : TestBase Methods Validate_CreateTexture(Color, Int32, Int32) Declaration public void Validate_CreateTexture(Color color, int width, int height) Parameters Type Name Description Color color Int32 width Int32 height Validate_StampTexture(Int32, Int32) Declaration public void Validate_StampTexture(int offsetX, int offsetY) Parameters Type Name Description Int32 offsetX Int32 offsetY Validate_StampTexture_Clear(Int32, Int32) Declaration public void Validate_StampTexture_Clear(int offsetX, int offsetY) Parameters Type Name Description Int32 offsetX Int32 offsetY Validate_StampTexture_Relative(Int32, Int32) Declaration public void Validate_StampTexture_Relative(int offsetX, int offsetY) Parameters Type Name Description Int32 offsetX Int32 offsetY Validate_Texture_Rotate_Random(Single, Int32, Int32) Declaration public void Validate_Texture_Rotate_Random(float rotation, int width, int height) Parameters Type Name Description Single rotation Int32 width Int32 height Validate_Texture_Rotate_Range(Single) Declaration public void Validate_Texture_Rotate_Range(float rotation) Parameters Type Name Description Single rotation"
  },
  "api/nickmaltbie.MinimapTools.Tests.PlayMode.html": {
    "href": "api/nickmaltbie.MinimapTools.Tests.PlayMode.html",
    "title": "Namespace nickmaltbie.MinimapTools.Tests.PlayMode | MinimapTools Documentation",
    "keywords": "Namespace nickmaltbie.MinimapTools.Tests.PlayMode Classes SamplePlaymodeTests"
  },
  "api/nickmaltbie.MinimapTools.Tests.PlayMode.SamplePlaymodeTests.html": {
    "href": "api/nickmaltbie.MinimapTools.Tests.PlayMode.SamplePlaymodeTests.html",
    "title": "Class SamplePlaymodeTests | MinimapTools Documentation",
    "keywords": "Class SamplePlaymodeTests Inheritance Object SamplePlaymodeTests Namespace : nickmaltbie.MinimapTools.Tests.PlayMode Assembly : cs.temp.dll.dll Syntax public class SamplePlaymodeTests : TestBase Methods Sample_PlaymodeTest() Declaration public void Sample_PlaymodeTest()"
  },
  "api/nickmaltbie.MinimapTools.Utils.html": {
    "href": "api/nickmaltbie.MinimapTools.Utils.html",
    "title": "Namespace nickmaltbie.MinimapTools.Utils | MinimapTools Documentation",
    "keywords": "Namespace nickmaltbie.MinimapTools.Utils Classes MathUtils Utility functions for math equations and features. ReadOnlyAttribute Read Only attribute. Attribute is use only to mark ReadOnly properties. TextureUtils Utility functions for texture utils."
  },
  "api/nickmaltbie.MinimapTools.Utils.MathUtils.html": {
    "href": "api/nickmaltbie.MinimapTools.Utils.MathUtils.html",
    "title": "Class MathUtils | MinimapTools Documentation",
    "keywords": "Class MathUtils Utility functions for math equations and features. Inheritance Object MathUtils Namespace : nickmaltbie.MinimapTools.Utils Assembly : cs.temp.dll.dll Syntax public static class MathUtils Methods GetRotatedAboutOrigin(Single, Single, Single) Get the coordinates of a point rotated about the origin (0,0). Declaration public static (float, float) GetRotatedAboutOrigin(float x1, float y1, float rotation) Parameters Type Name Description Single x1 X value of point to rotate. Single y1 Y value of point to rotate. Single rotation Amount to rotate point about origin in degrees. Returns Type Description (T1, T2) < Single , Single > Rotated position of point (x1, y1) about the origin (0,0). GetRotatedPoint(Single, Single, Single, Single, Single) Get the coordinates of a point rotated about a pivlot. Declaration public static (float, float) GetRotatedPoint(float x1, float y1, float pivotX, float pivotY, float rotation) Parameters Type Name Description Single x1 X value of point to rotate. Single y1 Y value of point to rotate. Single pivotX X value of pivot. Single pivotY Y value of pivot. Single rotation Amount to rotate point about pivot in degrees. Returns Type Description (T1, T2) < Single , Single > Rotated position of point (x1, y1) about the pivot."
  },
  "api/nickmaltbie.MinimapTools.Utils.ReadOnlyAttribute.html": {
    "href": "api/nickmaltbie.MinimapTools.Utils.ReadOnlyAttribute.html",
    "title": "Class ReadOnlyAttribute | MinimapTools Documentation",
    "keywords": "Class ReadOnlyAttribute Read Only attribute. Attribute is use only to mark ReadOnly properties. Inheritance Object ReadOnlyAttribute Namespace : nickmaltbie.MinimapTools.Utils Assembly : cs.temp.dll.dll Syntax public class ReadOnlyAttribute : PropertyAttribute"
  },
  "api/nickmaltbie.MinimapTools.Utils.TextureUtils.html": {
    "href": "api/nickmaltbie.MinimapTools.Utils.TextureUtils.html",
    "title": "Class TextureUtils | MinimapTools Documentation",
    "keywords": "Class TextureUtils Utility functions for texture utils. Inheritance Object TextureUtils Namespace : nickmaltbie.MinimapTools.Utils Assembly : cs.temp.dll.dll Syntax public static class TextureUtils Methods CreateTexture(Int32, Int32, Nullable<Color>) Create a texture of a given size with a given color. Declaration public static Texture2D CreateTexture(int width, int height, Color? color = null) Parameters Type Name Description Int32 width Width fo texture. Int32 height Height of texture Nullable < Color > color Color to make texture. Returns Type Description Texture2D DrawStamp(Texture2D, Texture2D, Vector2Int) Draw a stamp texture on a base texture map given a specific offset. Declaration public static void DrawStamp(this Texture2D source, Texture2D stamp, Vector2Int offsetPixels) Parameters Type Name Description Texture2D source Source texture to draw stamp on. Texture2D stamp Stamp texture to draw on source. Vector2Int offsetPixels Center offset of stamp on the source image. DrawStampRelative(Texture2D, Texture2D, Vector2) Draw a stamp at a relative position onto a texture map. Declaration public static void DrawStampRelative(this Texture2D source, Texture2D stamp, Vector2 relativePosition) Parameters Type Name Description Texture2D source Source texture to draw stamp on. Texture2D stamp Stamp texture to draw on source. Vector2 relativePosition Relative position of the center of the stamp on the source texture. GetResized(Texture2D, Vector2Int, Int32) Get a resized Texture2D via GPU and RenderTexture. Declaration public static Texture2D GetResized(this Texture2D texture, Vector2Int size, int depth = 32) Parameters Type Name Description Texture2D texture Texture to resize. Vector2Int size Size to scale texture to. Int32 depth Number of values per pixel, 24 for rgb, 32 for rgba Returns Type Description Texture2D Newly created resized texture. GetRotated(Texture2D, Single) Rotates a texture about its center. Declaration public static Texture2D GetRotated(this Texture2D texture, float rotation) Parameters Type Name Description Texture2D texture Texture to rotate. Single rotation Rotation of the image in degrees. Returns Type Description Texture2D Rotated texture."
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | MinimapTools Documentation",
    "keywords": "Changelog All notable changes to this project will be documented in this file. In Progress [v0.0.2] 2022-10-27 Setup centered minimap for the project. Configured fixed and relative size icons for the minimap. Configured minimap to be scaled in a constant pixels per unit size. Added documentation to the project for how to setup the editor. Added editor tools for modifying minimap shapes. [v0.0.1] 2022-10-23 Setup simple static minimap and project configuration. Added proposed design docs for project. Setup basic documentation for project. Renamed project to Minimap Tools."
  },
  "index.html": {
    "href": "index.html",
    "title": "Minimap Tools | MinimapTools Documentation",
    "keywords": "Minimap Tools Nick Maltbie's MinimapTools for creating basic minimaps for unity game spaces that can be explored by a user. MinimapTools is an open source project hosted at https://github.com/nicholas-maltbie/MinimapTools This is an open source project licensed under a MIT License . Features The minimap tools package includes the following features: UI Element for a minimap on the screen. Icons moved on the map based on objects inside the game scene. Optional automated generation of minimap texture from background elements. [Planned] Arbitrary minimap direction (besides just the XZ plane). [Planned] Supporting multiple minimap zoom layers and configuration. [Planned] Supporting multiple minimap areas depending on where the player is such as floors of a building. [Planned] Revealing the map as the player moves around with configurable levels of fog of war. Installation Install the latest version of the project by importing a project via git at this URL: https://github.com/nicholas-maltbie/MinimapTools.git#release/latest If you want to reference a specific tag of the project such as version v1.0.0 , add a release/#v1.0.0 to the end of the git URL to download the package from th auto-generated branch for that release. An example of importing v1.0.0 would look like this: https://github.com/nicholas-maltbie/MinimapTools.git#release/v0.1.0 To use the latest release, simply reference: https://github.com/nicholas-maltbie/MinimapTools.git#release/latest For a full list of all tags, check the MinimapTools Tags list on github. I will usually associated a tag with each release of the project. Note : before I started using the package format for the project, I manually released a unity package you needed to import. Any version before v1.0.0 will not work to import the project. If you do not include a tag, this means that your project will update whenever you reimport from main. This may cause some errors or problems due to experimental or breaking changes in the project. You can also import the project via a tarball if you download the source code and extract it on your local machine. Make sure to import via the package manifest defined at Packages\\com.nickmaltbie.MinimapTools\\package.json within the project. For more details about installing a project via git, see unity's documentation on Installing form a Git URL . Scoped Registry Install If you wish to install the project via a Scoped Registry and npm, you can add a scoped registry to your project from all of the com.nickmaltbie packages like this: \"scopedRegistries\": [ { \"name\": \"nickmaltbie\", \"url\": \"https://registry.npmjs.org\", \"scopes\": [ \"com.nickmaltbie\" ] } ] Then, if you want to reference a version of the project, you simply need to include the dependency with a version string and the unity package manager will be able to download it from the registry at https://registry.npmjs.org \"dependencies\": { \"com.nickmaltbie.MinimapTools\": \"1.0.0\", \"com.unity.inputsystem\": \"1.0.2\", \"com.unity.textmeshpro\": \"3.0.6\" } Tests If you wish to include the testing code for this project, make sure to add the com.nickmaltbie.MinimapTools to the testables of the project manifest. \"testables\": [ \"com.nickmaltbie.MinimapTools\" ] Demo You can see a demo of the project running here: https://nickmaltbie.com/MinimapTools/ . The project hosted on the website is up to date with the most recent version on the main branch of this github repo and is automatically deployed with each update to the codebase. Samples The samples in the project include: ExampleSample - Example sample for MinimapTools. Documentation Documentation on the project and scripting API is found at https://nickmaltbie.com/MinimapTools/docs/ for the latest version of the codebase."
  },
  "manual/code-design.html": {
    "href": "manual/code-design.html",
    "title": "Code Design | MinimapTools Documentation",
    "keywords": "Code Design Minimap is composed of a few components. UI element to represent map on screen. Bounds (world space of the minimap). Scale (number of pixels per world unit). Background texture. Moving Icons. Minimap Implementations The interface IMinimap represents the main responsibilities of a minimap. An important member of the IMinimap is the GetWorldBounds() function which returns a IMinimapShape . The minimap shape determines the space that the minimap takes up in real world space and is used in the minimap's function GetMinimapPosition(Vector3) which converts from world space to minimap space. World space is a Vector3 while minimap space is a Vector2 relative to the bottom right corner of the map. Minimap Coordinate Space Since this is designed with a 3D game in mind, we somehow have to convert the 3D space of points to the 2D space of the minimap. In order to do this conversion we need to have a way to represent objects in the minimap space. To get around this problem, I created the IMinimapShape interface to handle this behavior. This is useful for both the minimap itself as well as objects or icons that may be added to the minimap. The MinimapSquare is a concrete implementation of this minimap shape as a simple square and has the code to be able to get the shape of an object from 3D space to a 3D plane as a configurable square. Implementations There are two implementations of the IMinimap : CenteredMinimap - A Centered minimap that will move and or rotate with a selected minimap icon from a tag. Also supports scaling the map to be larger or smaller. SimpleStaticMinimap - This is a simple minimap that will draw the background and objects on the minimap Both of these implementations are based on the abstract class AbstractMinimap which has all the base functions for how the minimap should work including setting up the background and managing icons. Minimap Layers The AbstractMinimap configures the minimap to fit within its current RectTransform and will create a background texture within a supplied mask. The mask contains the minimap image within that area of the screen and can be any shape. Minimap Layout The minimap is organized into a few different sections. The minimap itself has a background texture drawn within the mask. The BackgroundTexture has many IMinimapElement drawn on top of it. In addition, multiple IMinimapIcon are created as GameObject on top of the minimap and moved independently. The organization is basically IMinimapElement - Drawn on the background and never moves IMinimapIcon - Move on top of the minimap along with the game. erDiagram Minimap { int pixelsPerUnit MinimapShape bounds Sprite mask } BackgroundTexture { Texture2D background } BackgroundElement { Texture2D texture Vector2 position } BackgroundIcon { Sprite sprite Vector2 position } Minimap ||--|{ BackgroundTexture : \"Has One\" BackgroundTexture ||--o{ BackgroundElement : \"Drawn On\" Minimap ||--o{ BackgroundIcon : \"Moved On\" Minimap Components The following is a description of the code for minimap components. Background Texture The BackgroundTexture is a class which supports creating a large texture and drawing elements on top of the background texture. Minimap Elements Background elements implement the IMinimapElement interface. There are two implementations of the IMinimapElement BoxMinimapElement - Box minimap that will draw a solid box on the background at a given position, rotation, and size. SpriteMinimapElement - Sprite minimap element that will draw a given texture on the background at a given position, rotation, and size. Both of these are derived from the AbstractMinimapElement class which contains useful functions for drawing the element at the position relative to the world space. The static class TextureUtils has useful functions for managing sprites and textures in Unity. Minimap Icon Minimap icons implement the @nickmaltbie.MinimapTools.Icon.IMinimapElement interface. There are two implementation of the @nickmaltbie.MinimapTools.Icon.IMinimapElement FixedSizeSpriteIcon - Icon that will always have the same pixel size on the minimap no matter the zoom level. @nickmaltbie.MinimapTools.Icon.RelativeSizeIcon - Icon that will scale with the map to maintain a consist size with its world size with the PixelsPerUnit So if an element was 1x1 units and the pixel scale was 30 pixels per unit, it would scale the icon to be 30x30 pixels. These are derived from the @nickmaltbie.MinimapTools.Icon.AbstractSizeIcon class which contains useful functions for managing a sprite and creating a GameObject icon as a child of the minimap."
  },
  "manual/introduction.html": {
    "href": "manual/introduction.html",
    "title": "Minimap Tools Introduction | MinimapTools Documentation",
    "keywords": "Minimap Tools Introduction Introduction to Nick Maltbie's Minimap Tools Package. Minimap Tools is a package to add basic UI elements for showing and exploring minimaps. Usage Please see the Usage section about how to use the Minimap tools in your own project. Code Layout The code design and layout of the project is described in the Code Design page. Requirements Design To see the design of the MinimapTools package, please see the Minimap Design document. Changelog Update 09-18-22 : Working on initial project setup."
  },
  "manual/minimap-design.html": {
    "href": "manual/minimap-design.html",
    "title": "Minimap Design | MinimapTools Documentation",
    "keywords": "Minimap Design This document presents a basic overview of how the minimap is designed for the unity project. Requirements The minimap can support a few different scenarios and requirements, let's define those at the start of this document. Show player's surroundings. Allow for easy navigation of virtual space. Highlight relevant information for a user. Allow player to focus on minimap to find important information. Examples This is a very broad definition of a minimap but there are a few existing high level minimap designs that could be derived from this. The simplest minimap may be something that just shows the room the player is located in relative to previously explored rooms like in the game Super Metroid. Image from Metroid Recon , Wikipedia Source Details Minimap in top right of screen. A more complex version of this minimap design may be something similar to Star craft 2's minimap which shows fog of war, terrain, units, as well as other important features and has navigation controls. Image from game StarCraft 2, Minimap in bottom left Features From the given requirements and examples above, we can define a set of features that satisfy these requirements. There are many designs and layers to the minimap, but as a basic set of goals, the minimap would need to do the following: Show a high level view of the world. Show the player their position relative to the world. This can have varying levels of detail. For example, the Metroid map just shows the room the player is in while the StarCraft map highlights every unit in the player's vision. Expand to show new areas as the player explores them. These capabilities implemented together should satisfy all the requirements we defined earlier. Design Overview The minimap component itself will be implemented similar to that of StarCraft and Metroid as a UI element on the screen. To implement the features described in the previous section, we will need to combine a few components and layers together. View of World The minimap itself should just show the world around the player. To make this the most simple, we can allow the end user to give the minimap a sprite/image texture to display as the base of the map. We can then draw a scaled version of this image as the minimap on the screen. We could generate this image from a terrain map or labeled structure but at the most general level, we simply need to draw an image on the screen. Relative Position Once we have the basic image down, we need to then show where the player is viewing the map. The simplest way to do this is to make some sort of icon/drawing to show the player on the minimap. Again, the most general form of this would be just to draw a sprite on top of the minimap to show the player. Additionally, sometimes a minimap can be too large so showing a zoomed in version of the minimap to highlight local features and having the center of the map move with the player may make it easier to view and read. This is how the map in metroid is configured. However, this moving map feature is a more specialized feature as not every map needs this feature. For example, the StarCraft map provided earlier just draws a square to show the area the player is viewing. Reveal New Areas The last general feature I would like to add to the minimap is revealing new areas. With the StarCraft map as well as the Metroid map, the map expands and shows new area as the player explores them. There are two main ways this could be implemented. Adding to the base map image every time a new area is explored. Having a cover over the original map and revealing parts of it as it is explored. Since we assumed that the map would be a static image from an earlier step, revealing parts of the map would probably be the easiest method for implementing this. Lots of image editing programs such as GIMP or PhotoShop have a concept of layers and masks. To achieve revealing the map from a cover, we simply would need to draw a layer over the original map and erase parts of the cover as the player explores new areas. Other Features Some additional features that seem to be in common use among many games include: Navigation via minimap Fog of war exploration Expanding to a full screen map Highlighting objects on the minimap"
  },
  "manual/usage.html": {
    "href": "manual/usage.html",
    "title": "Usage | MinimapTools Documentation",
    "keywords": "Usage The MinimapTools package is composed of a few main components. World space for the minimap defined via an IMinimapShape The behaviour MinimapBoundsSource defines a MinimapSquare that can be read via the AbstractMinimap behaviour. A minimap UI element defined as IMinimap There are a few concrete implementations of this defined in the project. CenteredMinimap - A Centered minimap that will move and or rotate with a selected minimap icon from a tag. Also supports scaling the map to be larger or smaller. SimpleStaticMinimap - This is a simple minimap that will draw the background and objects on the minimap. Minimap Elements that are in a fixed position on the minimap. The interface for this is defined as IMinimapElement BoxMinimapElement - Box minimap that will draw a solid box on the background at a given position, rotation, and size. SpriteMinimapElement - Sprite minimap element that will draw a given texture on the background at a given position, rotation, and size. Minimap Icons that move around on top of the minimap. The interface for icons is defined as IMinimapIcon FixedSizeSpriteIcon - Icon that will always have the same pixel size on the minimap no matter the zoom level. @nickmaltbie.MinimapTools.Icon.RelativeSizeIcon - Icon that will scale with the map to maintain a consist size with its world size. Sample The sample MinimapFPS defined at Assets\\Samples\\MinimapFPS has an example of the minimap as part of the UIManager prefab for minimaps at the path Assets\\Samples\\MinimapFPS\\UI\\Minimap ."
  }
}